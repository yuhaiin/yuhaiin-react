// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,js_import_style=legacy_commonjs"
// @generated from file node/subscribe/subscribe.proto (package yuhaiin.subscribe, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum yuhaiin.subscribe.type
 */
export enum type {
  /**
   * @generated from enum value: reserve = 0;
   */
  reserve = 0,

  /**
   * @generated from enum value: trojan = 1;
   */
  trojan = 1,

  /**
   * @generated from enum value: vmess = 2;
   */
  vmess = 2,

  /**
   * @generated from enum value: shadowsocks = 3;
   */
  shadowsocks = 3,

  /**
   * @generated from enum value: shadowsocksr = 4;
   */
  shadowsocksr = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(type)
proto3.util.setEnumType(type, "yuhaiin.subscribe.type", [
  { no: 0, name: "reserve" },
  { no: 1, name: "trojan" },
  { no: 2, name: "vmess" },
  { no: 3, name: "shadowsocks" },
  { no: 4, name: "shadowsocksr" },
]);

/**
 * @generated from message yuhaiin.subscribe.link
 */
export class link extends Message<link> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: yuhaiin.subscribe.type type = 2;
   */
  type = type.reserve;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<link>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.subscribe.link";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(type) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): link {
    return new link().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): link {
    return new link().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): link {
    return new link().fromJsonString(jsonString, options);
  }

  static equals(a: link | PlainMessage<link> | undefined, b: link | PlainMessage<link> | undefined): boolean {
    return proto3.util.equals(link, a, b);
  }
}

