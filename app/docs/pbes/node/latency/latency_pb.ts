// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,js_import_style=legacy_commonjs"
// @generated from file node/latency/latency.proto (package yuhaiin.latency, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message yuhaiin.latency.http
 */
export class http extends Message<http> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<http>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.latency.http";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): http {
    return new http().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): http {
    return new http().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): http {
    return new http().fromJsonString(jsonString, options);
  }

  static equals(a: http | PlainMessage<http> | undefined, b: http | PlainMessage<http> | undefined): boolean {
    return proto3.util.equals(http, a, b);
  }
}

/**
 * @generated from message yuhaiin.latency.dns
 */
export class dns extends Message<dns> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: string target_domain = 2 [json_name = "target_name"];
   */
  targetDomain = "";

  constructor(data?: PartialMessage<dns>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.latency.dns";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_domain", jsonName: "target_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): dns {
    return new dns().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): dns {
    return new dns().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): dns {
    return new dns().fromJsonString(jsonString, options);
  }

  static equals(a: dns | PlainMessage<dns> | undefined, b: dns | PlainMessage<dns> | undefined): boolean {
    return proto3.util.equals(dns, a, b);
  }
}

/**
 * @generated from message yuhaiin.latency.dns_over_quic
 */
export class dns_over_quic extends Message<dns_over_quic> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: string target_domain = 2 [json_name = "target_name"];
   */
  targetDomain = "";

  constructor(data?: PartialMessage<dns_over_quic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.latency.dns_over_quic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_domain", jsonName: "target_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): dns_over_quic {
    return new dns_over_quic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): dns_over_quic {
    return new dns_over_quic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): dns_over_quic {
    return new dns_over_quic().fromJsonString(jsonString, options);
  }

  static equals(a: dns_over_quic | PlainMessage<dns_over_quic> | undefined, b: dns_over_quic | PlainMessage<dns_over_quic> | undefined): boolean {
    return proto3.util.equals(dns_over_quic, a, b);
  }
}

/**
 * @generated from message yuhaiin.latency.protocol
 */
export class protocol extends Message<protocol> {
  /**
   * @generated from oneof yuhaiin.latency.protocol.protocol
   */
  protocol: {
    /**
     * @generated from field: yuhaiin.latency.http http = 1;
     */
    value: http;
    case: "http";
  } | {
    /**
     * @generated from field: yuhaiin.latency.dns dns = 2;
     */
    value: dns;
    case: "dns";
  } | {
    /**
     * @generated from field: yuhaiin.latency.dns_over_quic dns_over_quic = 3 [json_name = "dns_over_quic"];
     */
    value: dns_over_quic;
    case: "dnsOverQuic";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<protocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.latency.protocol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "http", kind: "message", T: http, oneof: "protocol" },
    { no: 2, name: "dns", kind: "message", T: dns, oneof: "protocol" },
    { no: 3, name: "dns_over_quic", jsonName: "dns_over_quic", kind: "message", T: dns_over_quic, oneof: "protocol" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): protocol {
    return new protocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): protocol {
    return new protocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): protocol {
    return new protocol().fromJsonString(jsonString, options);
  }

  static equals(a: protocol | PlainMessage<protocol> | undefined, b: protocol | PlainMessage<protocol> | undefined): boolean {
    return proto3.util.equals(protocol, a, b);
  }
}

/**
 * @generated from message yuhaiin.latency.request
 */
export class request extends Message<request> {
  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: bool ipv6 = 4;
   */
  ipv6 = false;

  /**
   * @generated from field: yuhaiin.latency.protocol protocol = 2;
   */
  protocol?: protocol;

  constructor(data?: PartialMessage<request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.latency.request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ipv6", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "protocol", kind: "message", T: protocol },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): request {
    return new request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): request {
    return new request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): request {
    return new request().fromJsonString(jsonString, options);
  }

  static equals(a: request | PlainMessage<request> | undefined, b: request | PlainMessage<request> | undefined): boolean {
    return proto3.util.equals(request, a, b);
  }
}

/**
 * @generated from message yuhaiin.latency.requests
 */
export class requests extends Message<requests> {
  /**
   * @generated from field: repeated yuhaiin.latency.request requests = 1;
   */
  requests: request[] = [];

  constructor(data?: PartialMessage<requests>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.latency.requests";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: request, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): requests {
    return new requests().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): requests {
    return new requests().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): requests {
    return new requests().fromJsonString(jsonString, options);
  }

  static equals(a: requests | PlainMessage<requests> | undefined, b: requests | PlainMessage<requests> | undefined): boolean {
    return proto3.util.equals(requests, a, b);
  }
}

/**
 * @generated from message yuhaiin.latency.response
 */
export class response extends Message<response> {
  /**
   * @generated from field: map<string, google.protobuf.Duration> id_latency_map = 1 [json_name = "id_latency_map"];
   */
  idLatencyMap: { [key: string]: Duration } = {};

  constructor(data?: PartialMessage<response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.latency.response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id_latency_map", jsonName: "id_latency_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Duration} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): response {
    return new response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): response {
    return new response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): response {
    return new response().fromJsonString(jsonString, options);
  }

  static equals(a: response | PlainMessage<response> | undefined, b: response | PlainMessage<response> | undefined): boolean {
    return proto3.util.equals(response, a, b);
  }
}

