// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file config/listener/listener.proto (package yuhaiin.listener, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum yuhaiin.listener.tcp_udp_control
 */
export enum tcp_udp_control {
  /**
   * @generated from enum value: tcp_udp_control_all = 0;
   */
  tcp_udp_control_all = 0,

  /**
   * @generated from enum value: disable_tcp = 1;
   */
  disable_tcp = 1,

  /**
   * @generated from enum value: disable_udp = 2;
   */
  disable_udp = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(tcp_udp_control)
proto3.util.setEnumType(tcp_udp_control, "yuhaiin.listener.tcp_udp_control", [
  { no: 0, name: "tcp_udp_control_all" },
  { no: 1, name: "disable_tcp" },
  { no: 2, name: "disable_udp" },
]);

/**
 * @generated from message yuhaiin.listener.inbound_config
 */
export class inbound_config extends Message<inbound_config> {
  /**
   * @generated from field: bool hijack_dns = 2 [json_name = "hijack_dns"];
   */
  hijackDns = false;

  /**
   * @generated from field: bool hijack_dns_fakeip = 3 [json_name = "hijack_dns_fakeip"];
   */
  hijackDnsFakeip = false;

  /**
   * @generated from field: map<string, yuhaiin.listener.inbound> inbounds = 1;
   */
  inbounds: { [key: string]: inbound } = {};

  /**
   * @generated from field: yuhaiin.listener.sniff sniff = 4;
   */
  sniff?: sniff;

  constructor(data?: PartialMessage<inbound_config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.inbound_config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "hijack_dns", jsonName: "hijack_dns", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "hijack_dns_fakeip", jsonName: "hijack_dns_fakeip", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 1, name: "inbounds", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: inbound} },
    { no: 4, name: "sniff", kind: "message", T: sniff },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): inbound_config {
    return new inbound_config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): inbound_config {
    return new inbound_config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): inbound_config {
    return new inbound_config().fromJsonString(jsonString, options);
  }

  static equals(a: inbound_config | PlainMessage<inbound_config> | undefined, b: inbound_config | PlainMessage<inbound_config> | undefined): boolean {
    return proto3.util.equals(inbound_config, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.inbound
 */
export class inbound extends Message<inbound> {
  /**
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * @generated from field: bool enabled = 14;
   */
  enabled = false;

  /**
   * @generated from oneof yuhaiin.listener.inbound.network
   */
  network: {
    /**
     * @generated from field: yuhaiin.listener.empty empty = 21;
     */
    value: empty;
    case: "empty";
  } | {
    /**
     * @generated from field: yuhaiin.listener.tcpudp tcpudp = 15;
     */
    value: tcpudp;
    case: "tcpudp";
  } | {
    /**
     * @generated from field: yuhaiin.listener.quic quic = 16;
     */
    value: quic;
    case: "quic";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated yuhaiin.listener.transport transport = 2;
   */
  transport: transport[] = [];

  /**
   * @generated from oneof yuhaiin.listener.inbound.protocol
   */
  protocol: {
    /**
     * @generated from field: yuhaiin.listener.http http = 3;
     */
    value: http;
    case: "http";
  } | {
    /**
     * @generated from field: yuhaiin.listener.socks5 socks5 = 4;
     */
    value: socks5;
    case: "socks5";
  } | {
    /**
     * @generated from field: yuhaiin.listener.yuubinsya yuubinsya = 7;
     */
    value: yuubinsya;
    case: "yuubinsya";
  } | {
    /**
     * @generated from field: yuhaiin.listener.mixed mix = 8 [json_name = "mixed"];
     */
    value: mixed;
    case: "mix";
  } | {
    /**
     * @generated from field: yuhaiin.listener.socks4a socks4a = 9;
     */
    value: socks4a;
    case: "socks4a";
  } | {
    /**
     * @generated from field: yuhaiin.listener.tproxy tproxy = 20;
     */
    value: tproxy;
    case: "tproxy";
  } | {
    /**
     * @generated from field: yuhaiin.listener.redir redir = 18;
     */
    value: redir;
    case: "redir";
  } | {
    /**
     * @generated from field: yuhaiin.listener.tun tun = 19;
     */
    value: tun;
    case: "tun";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<inbound>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.inbound";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "empty", kind: "message", T: empty, oneof: "network" },
    { no: 15, name: "tcpudp", kind: "message", T: tcpudp, oneof: "network" },
    { no: 16, name: "quic", kind: "message", T: quic, oneof: "network" },
    { no: 2, name: "transport", kind: "message", T: transport, repeated: true },
    { no: 3, name: "http", kind: "message", T: http, oneof: "protocol" },
    { no: 4, name: "socks5", kind: "message", T: socks5, oneof: "protocol" },
    { no: 7, name: "yuubinsya", kind: "message", T: yuubinsya, oneof: "protocol" },
    { no: 8, name: "mix", jsonName: "mixed", kind: "message", T: mixed, oneof: "protocol" },
    { no: 9, name: "socks4a", kind: "message", T: socks4a, oneof: "protocol" },
    { no: 20, name: "tproxy", kind: "message", T: tproxy, oneof: "protocol" },
    { no: 18, name: "redir", kind: "message", T: redir, oneof: "protocol" },
    { no: 19, name: "tun", kind: "message", T: tun, oneof: "protocol" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): inbound {
    return new inbound().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): inbound {
    return new inbound().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): inbound {
    return new inbound().fromJsonString(jsonString, options);
  }

  static equals(a: inbound | PlainMessage<inbound> | undefined, b: inbound | PlainMessage<inbound> | undefined): boolean {
    return proto3.util.equals(inbound, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.transport
 */
export class transport extends Message<transport> {
  /**
   * @generated from oneof yuhaiin.listener.transport.transport
   */
  transport: {
    /**
     * @generated from field: yuhaiin.listener.normal normal = 12;
     */
    value: normal;
    case: "normal";
  } | {
    /**
     * @generated from field: yuhaiin.listener.tls tls = 1;
     */
    value: tls;
    case: "tls";
  } | {
    /**
     * @generated from field: yuhaiin.listener.mux mux = 2;
     */
    value: mux;
    case: "mux";
  } | {
    /**
     * @generated from field: yuhaiin.listener.http2 http2 = 5;
     */
    value: http2;
    case: "http2";
  } | {
    /**
     * @generated from field: yuhaiin.listener.websocket websocket = 6;
     */
    value: websocket;
    case: "websocket";
  } | {
    /**
     * @generated from field: yuhaiin.listener.grpc grpc = 11;
     */
    value: grpc;
    case: "grpc";
  } | {
    /**
     * @generated from field: yuhaiin.listener.reality reality = 10;
     */
    value: reality;
    case: "reality";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<transport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.transport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 12, name: "normal", kind: "message", T: normal, oneof: "transport" },
    { no: 1, name: "tls", kind: "message", T: tls, oneof: "transport" },
    { no: 2, name: "mux", kind: "message", T: mux, oneof: "transport" },
    { no: 5, name: "http2", kind: "message", T: http2, oneof: "transport" },
    { no: 6, name: "websocket", kind: "message", T: websocket, oneof: "transport" },
    { no: 11, name: "grpc", kind: "message", T: grpc, oneof: "transport" },
    { no: 10, name: "reality", kind: "message", T: reality, oneof: "transport" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): transport {
    return new transport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): transport {
    return new transport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): transport {
    return new transport().fromJsonString(jsonString, options);
  }

  static equals(a: transport | PlainMessage<transport> | undefined, b: transport | PlainMessage<transport> | undefined): boolean {
    return proto3.util.equals(transport, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.protocol
 */
export class protocol extends Message<protocol> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled = false;

  /**
   * @generated from oneof yuhaiin.listener.protocol.protocol
   */
  protocol: {
    /**
     * @generated from field: yuhaiin.listener.http http = 3;
     */
    value: http;
    case: "http";
  } | {
    /**
     * @generated from field: yuhaiin.listener.socks5 socks5 = 4;
     */
    value: socks5;
    case: "socks5";
  } | {
    /**
     * @generated from field: yuhaiin.listener.redir redir = 5;
     */
    value: redir;
    case: "redir";
  } | {
    /**
     * @generated from field: yuhaiin.listener.tun tun = 6;
     */
    value: tun;
    case: "tun";
  } | {
    /**
     * @generated from field: yuhaiin.listener.yuubinsya yuubinsya = 7;
     */
    value: yuubinsya;
    case: "yuubinsya";
  } | {
    /**
     * @generated from field: yuhaiin.listener.mixed mix = 8 [json_name = "mixed"];
     */
    value: mixed;
    case: "mix";
  } | {
    /**
     * @generated from field: yuhaiin.listener.socks4a socks4a = 9;
     */
    value: socks4a;
    case: "socks4a";
  } | {
    /**
     * @generated from field: yuhaiin.listener.tproxy tproxy = 10;
     */
    value: tproxy;
    case: "tproxy";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<protocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.protocol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "http", kind: "message", T: http, oneof: "protocol" },
    { no: 4, name: "socks5", kind: "message", T: socks5, oneof: "protocol" },
    { no: 5, name: "redir", kind: "message", T: redir, oneof: "protocol" },
    { no: 6, name: "tun", kind: "message", T: tun, oneof: "protocol" },
    { no: 7, name: "yuubinsya", kind: "message", T: yuubinsya, oneof: "protocol" },
    { no: 8, name: "mix", jsonName: "mixed", kind: "message", T: mixed, oneof: "protocol" },
    { no: 9, name: "socks4a", kind: "message", T: socks4a, oneof: "protocol" },
    { no: 10, name: "tproxy", kind: "message", T: tproxy, oneof: "protocol" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): protocol {
    return new protocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): protocol {
    return new protocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): protocol {
    return new protocol().fromJsonString(jsonString, options);
  }

  static equals(a: protocol | PlainMessage<protocol> | undefined, b: protocol | PlainMessage<protocol> | undefined): boolean {
    return proto3.util.equals(protocol, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.empty
 */
export class empty extends Message<empty> {
  constructor(data?: PartialMessage<empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): empty {
    return new empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): empty {
    return new empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): empty {
    return new empty().fromJsonString(jsonString, options);
  }

  static equals(a: empty | PlainMessage<empty> | undefined, b: empty | PlainMessage<empty> | undefined): boolean {
    return proto3.util.equals(empty, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.mux
 */
export class mux extends Message<mux> {
  constructor(data?: PartialMessage<mux>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.mux";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): mux {
    return new mux().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): mux {
    return new mux().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): mux {
    return new mux().fromJsonString(jsonString, options);
  }

  static equals(a: mux | PlainMessage<mux> | undefined, b: mux | PlainMessage<mux> | undefined): boolean {
    return proto3.util.equals(mux, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.tcpudp
 */
export class tcpudp extends Message<tcpudp> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: yuhaiin.listener.tcp_udp_control control = 2;
   */
  control = tcp_udp_control.tcp_udp_control_all;

  constructor(data?: PartialMessage<tcpudp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.tcpudp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "control", kind: "enum", T: proto3.getEnumType(tcp_udp_control) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): tcpudp {
    return new tcpudp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): tcpudp {
    return new tcpudp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): tcpudp {
    return new tcpudp().fromJsonString(jsonString, options);
  }

  static equals(a: tcpudp | PlainMessage<tcpudp> | undefined, b: tcpudp | PlainMessage<tcpudp> | undefined): boolean {
    return proto3.util.equals(tcpudp, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.quic
 */
export class quic extends Message<quic> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: yuhaiin.listener.tls_config tls = 3;
   */
  tls?: tls_config;

  constructor(data?: PartialMessage<quic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.quic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tls", kind: "message", T: tls_config },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): quic {
    return new quic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): quic {
    return new quic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): quic {
    return new quic().fromJsonString(jsonString, options);
  }

  static equals(a: quic | PlainMessage<quic> | undefined, b: quic | PlainMessage<quic> | undefined): boolean {
    return proto3.util.equals(quic, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.http
 */
export class http extends Message<http> {
  /**
   * @generated from field: string username = 3;
   */
  username = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  constructor(data?: PartialMessage<http>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.http";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): http {
    return new http().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): http {
    return new http().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): http {
    return new http().fromJsonString(jsonString, options);
  }

  static equals(a: http | PlainMessage<http> | undefined, b: http | PlainMessage<http> | undefined): boolean {
    return proto3.util.equals(http, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.socks5
 */
export class socks5 extends Message<socks5> {
  /**
   * @generated from field: string username = 3;
   */
  username = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  /**
   * @generated from field: bool udp = 5;
   */
  udp = false;

  constructor(data?: PartialMessage<socks5>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.socks5";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "udp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): socks5 {
    return new socks5().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): socks5 {
    return new socks5().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): socks5 {
    return new socks5().fromJsonString(jsonString, options);
  }

  static equals(a: socks5 | PlainMessage<socks5> | undefined, b: socks5 | PlainMessage<socks5> | undefined): boolean {
    return proto3.util.equals(socks5, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.socks4a
 */
export class socks4a extends Message<socks4a> {
  /**
   * @generated from field: string username = 2;
   */
  username = "";

  constructor(data?: PartialMessage<socks4a>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.socks4a";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): socks4a {
    return new socks4a().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): socks4a {
    return new socks4a().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): socks4a {
    return new socks4a().fromJsonString(jsonString, options);
  }

  static equals(a: socks4a | PlainMessage<socks4a> | undefined, b: socks4a | PlainMessage<socks4a> | undefined): boolean {
    return proto3.util.equals(socks4a, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.mixed
 */
export class mixed extends Message<mixed> {
  /**
   * @generated from field: string username = 3;
   */
  username = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  constructor(data?: PartialMessage<mixed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.mixed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): mixed {
    return new mixed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): mixed {
    return new mixed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): mixed {
    return new mixed().fromJsonString(jsonString, options);
  }

  static equals(a: mixed | PlainMessage<mixed> | undefined, b: mixed | PlainMessage<mixed> | undefined): boolean {
    return proto3.util.equals(mixed, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.redir
 */
export class redir extends Message<redir> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  constructor(data?: PartialMessage<redir>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.redir";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): redir {
    return new redir().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): redir {
    return new redir().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): redir {
    return new redir().fromJsonString(jsonString, options);
  }

  static equals(a: redir | PlainMessage<redir> | undefined, b: redir | PlainMessage<redir> | undefined): boolean {
    return proto3.util.equals(redir, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.tproxy
 */
export class tproxy extends Message<tproxy> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: bool dns_hijacking = 2 [json_name = "dns_hijacking"];
   */
  dnsHijacking = false;

  /**
   * @generated from field: bool force_fakeip = 3 [json_name = "force_fakeip"];
   */
  forceFakeip = false;

  constructor(data?: PartialMessage<tproxy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.tproxy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dns_hijacking", jsonName: "dns_hijacking", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "force_fakeip", jsonName: "force_fakeip", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): tproxy {
    return new tproxy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): tproxy {
    return new tproxy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): tproxy {
    return new tproxy().fromJsonString(jsonString, options);
  }

  static equals(a: tproxy | PlainMessage<tproxy> | undefined, b: tproxy | PlainMessage<tproxy> | undefined): boolean {
    return proto3.util.equals(tproxy, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.tun
 */
export class tun extends Message<tun> {
  /**
   * name of the tun device
   * eg: tun://tun0, fd://123
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 mtu = 2;
   */
  mtu = 0;

  /**
   * @generated from field: bool force_fakeip = 9 [json_name = "force_fakeip"];
   */
  forceFakeip = false;

  /**
   * @generated from field: bool skip_multicast = 6 [json_name = "skip_multicast"];
   */
  skipMulticast = false;

  /**
   * @generated from field: yuhaiin.listener.tun.endpoint_driver driver = 7;
   */
  driver = tun_endpoint_driver.fdbased;

  /**
   * @generated from field: string portal = 8;
   */
  portal = "";

  /**
   * @generated from field: string portal_v6 = 11 [json_name = "portal_v6"];
   */
  portalV6 = "";

  /**
   * @generated from field: yuhaiin.listener.route route = 10;
   */
  route?: route;

  /**
   * @generated from field: repeated string post_up = 12 [json_name = "post_up"];
   */
  postUp: string[] = [];

  /**
   * @generated from field: repeated string post_down = 13 [json_name = "post_down"];
   */
  postDown: string[] = [];

  constructor(data?: PartialMessage<tun>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.tun";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mtu", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "force_fakeip", jsonName: "force_fakeip", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "skip_multicast", jsonName: "skip_multicast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "driver", kind: "enum", T: proto3.getEnumType(tun_endpoint_driver) },
    { no: 8, name: "portal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "portal_v6", jsonName: "portal_v6", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "route", kind: "message", T: route },
    { no: 12, name: "post_up", jsonName: "post_up", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "post_down", jsonName: "post_down", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): tun {
    return new tun().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): tun {
    return new tun().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): tun {
    return new tun().fromJsonString(jsonString, options);
  }

  static equals(a: tun | PlainMessage<tun> | undefined, b: tun | PlainMessage<tun> | undefined): boolean {
    return proto3.util.equals(tun, a, b);
  }
}

/**
 * @generated from enum yuhaiin.listener.tun.endpoint_driver
 */
export enum tun_endpoint_driver {
  /**
   * @generated from enum value: fdbased = 0;
   */
  fdbased = 0,

  /**
   * @generated from enum value: channel = 1;
   */
  channel = 1,

  /**
   * @generated from enum value: system_gvisor = 2;
   */
  system_gvisor = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(tun_endpoint_driver)
proto3.util.setEnumType(tun_endpoint_driver, "yuhaiin.listener.tun.endpoint_driver", [
  { no: 0, name: "fdbased" },
  { no: 1, name: "channel" },
  { no: 2, name: "system_gvisor" },
]);

/**
 * @generated from message yuhaiin.listener.route
 */
export class route extends Message<route> {
  /**
   * @generated from field: repeated string routes = 1;
   */
  routes: string[] = [];

  /**
   * @generated from field: repeated string excludes = 2;
   */
  excludes: string[] = [];

  constructor(data?: PartialMessage<route>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.route";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "routes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "excludes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): route {
    return new route().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): route {
    return new route().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): route {
    return new route().fromJsonString(jsonString, options);
  }

  static equals(a: route | PlainMessage<route> | undefined, b: route | PlainMessage<route> | undefined): boolean {
    return proto3.util.equals(route, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.yuubinsya
 */
export class yuubinsya extends Message<yuubinsya> {
  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: bool tcp_encrypt = 12 [json_name = "tcp_encrypt"];
   */
  tcpEncrypt = false;

  /**
   * @generated from field: bool udp_encrypt = 13 [json_name = "udp_encrypt"];
   */
  udpEncrypt = false;

  /**
   * @generated from field: bool mux = 11;
   */
  mux = false;

  constructor(data?: PartialMessage<yuubinsya>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.yuubinsya";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "tcp_encrypt", jsonName: "tcp_encrypt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "udp_encrypt", jsonName: "udp_encrypt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "mux", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): yuubinsya {
    return new yuubinsya().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): yuubinsya {
    return new yuubinsya().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): yuubinsya {
    return new yuubinsya().fromJsonString(jsonString, options);
  }

  static equals(a: yuubinsya | PlainMessage<yuubinsya> | undefined, b: yuubinsya | PlainMessage<yuubinsya> | undefined): boolean {
    return proto3.util.equals(yuubinsya, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.normal
 */
export class normal extends Message<normal> {
  constructor(data?: PartialMessage<normal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.normal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): normal {
    return new normal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): normal {
    return new normal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): normal {
    return new normal().fromJsonString(jsonString, options);
  }

  static equals(a: normal | PlainMessage<normal> | undefined, b: normal | PlainMessage<normal> | undefined): boolean {
    return proto3.util.equals(normal, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.websocket
 */
export class websocket extends Message<websocket> {
  constructor(data?: PartialMessage<websocket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.websocket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): websocket {
    return new websocket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): websocket {
    return new websocket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): websocket {
    return new websocket().fromJsonString(jsonString, options);
  }

  static equals(a: websocket | PlainMessage<websocket> | undefined, b: websocket | PlainMessage<websocket> | undefined): boolean {
    return proto3.util.equals(websocket, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.tls
 */
export class tls extends Message<tls> {
  /**
   * @generated from field: yuhaiin.listener.tls_config tls = 1;
   */
  tls?: tls_config;

  constructor(data?: PartialMessage<tls>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.tls";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tls", kind: "message", T: tls_config },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): tls {
    return new tls().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): tls {
    return new tls().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): tls {
    return new tls().fromJsonString(jsonString, options);
  }

  static equals(a: tls | PlainMessage<tls> | undefined, b: tls | PlainMessage<tls> | undefined): boolean {
    return proto3.util.equals(tls, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.grpc
 */
export class grpc extends Message<grpc> {
  constructor(data?: PartialMessage<grpc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.grpc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): grpc {
    return new grpc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): grpc {
    return new grpc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): grpc {
    return new grpc().fromJsonString(jsonString, options);
  }

  static equals(a: grpc | PlainMessage<grpc> | undefined, b: grpc | PlainMessage<grpc> | undefined): boolean {
    return proto3.util.equals(grpc, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.http2
 */
export class http2 extends Message<http2> {
  constructor(data?: PartialMessage<http2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.http2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): http2 {
    return new http2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): http2 {
    return new http2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): http2 {
    return new http2().fromJsonString(jsonString, options);
  }

  static equals(a: http2 | PlainMessage<http2> | undefined, b: http2 | PlainMessage<http2> | undefined): boolean {
    return proto3.util.equals(http2, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.reality
 */
export class reality extends Message<reality> {
  /**
   * @generated from field: repeated string short_id = 1 [json_name = "short_id"];
   */
  shortId: string[] = [];

  /**
   * @generated from field: repeated string server_name = 2 [json_name = "server_name"];
   */
  serverName: string[] = [];

  /**
   * @generated from field: string dest = 3;
   */
  dest = "";

  /**
   * @generated from field: string private_key = 4 [json_name = "private_key"];
   */
  privateKey = "";

  /**
   * @generated from field: bool debug = 5;
   */
  debug = false;

  constructor(data?: PartialMessage<reality>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.reality";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "short_id", jsonName: "short_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "server_name", jsonName: "server_name", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "dest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "private_key", jsonName: "private_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "debug", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): reality {
    return new reality().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): reality {
    return new reality().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): reality {
    return new reality().fromJsonString(jsonString, options);
  }

  static equals(a: reality | PlainMessage<reality> | undefined, b: reality | PlainMessage<reality> | undefined): boolean {
    return proto3.util.equals(reality, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.tls_config
 */
export class tls_config extends Message<tls_config> {
  /**
   * @generated from field: repeated yuhaiin.listener.certificate certificates = 1;
   */
  certificates: certificate[] = [];

  /**
   * @generated from field: repeated string next_protos = 3 [json_name = "next_protos"];
   */
  nextProtos: string[] = [];

  /**
   * @generated from field: map<string, yuhaiin.listener.certificate> server_name_certificate = 4 [json_name = "server_name_certificate"];
   */
  serverNameCertificate: { [key: string]: certificate } = {};

  constructor(data?: PartialMessage<tls_config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.tls_config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "certificates", kind: "message", T: certificate, repeated: true },
    { no: 3, name: "next_protos", jsonName: "next_protos", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "server_name_certificate", jsonName: "server_name_certificate", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: certificate} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): tls_config {
    return new tls_config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): tls_config {
    return new tls_config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): tls_config {
    return new tls_config().fromJsonString(jsonString, options);
  }

  static equals(a: tls_config | PlainMessage<tls_config> | undefined, b: tls_config | PlainMessage<tls_config> | undefined): boolean {
    return proto3.util.equals(tls_config, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.certificate
 */
export class certificate extends Message<certificate> {
  /**
   * @generated from field: bytes cert = 1;
   */
  cert = new Uint8Array(0);

  /**
   * @generated from field: bytes key = 2;
   */
  key = new Uint8Array(0);

  /**
   * @generated from field: string cert_file_path = 3 [json_name = "cert_file_path"];
   */
  certFilePath = "";

  /**
   * @generated from field: string key_file_path = 4 [json_name = "key_file_path"];
   */
  keyFilePath = "";

  constructor(data?: PartialMessage<certificate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.certificate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cert", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "cert_file_path", jsonName: "cert_file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "key_file_path", jsonName: "key_file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): certificate {
    return new certificate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): certificate {
    return new certificate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): certificate {
    return new certificate().fromJsonString(jsonString, options);
  }

  static equals(a: certificate | PlainMessage<certificate> | undefined, b: certificate | PlainMessage<certificate> | undefined): boolean {
    return proto3.util.equals(certificate, a, b);
  }
}

/**
 * @generated from message yuhaiin.listener.sniff
 */
export class sniff extends Message<sniff> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  constructor(data?: PartialMessage<sniff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.listener.sniff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): sniff {
    return new sniff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): sniff {
    return new sniff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): sniff {
    return new sniff().fromJsonString(jsonString, options);
  }

  static equals(a: sniff | PlainMessage<sniff> | undefined, b: sniff | PlainMessage<sniff> | undefined): boolean {
    return proto3.util.equals(sniff, a, b);
  }
}

