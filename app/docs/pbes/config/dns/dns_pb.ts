// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file config/dns/dns.proto (package yuhaiin.dns, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum yuhaiin.dns.type
 */
export enum type {
  /**
   * @generated from enum value: reserve = 0;
   */
  reserve = 0,

  /**
   * @generated from enum value: udp = 1;
   */
  udp = 1,

  /**
   * @generated from enum value: tcp = 2;
   */
  tcp = 2,

  /**
   * @generated from enum value: doh = 3;
   */
  doh = 3,

  /**
   * @generated from enum value: dot = 4;
   */
  dot = 4,

  /**
   * @generated from enum value: doq = 5;
   */
  doq = 5,

  /**
   * @generated from enum value: doh3 = 6;
   */
  doh3 = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(type)
proto3.util.setEnumType(type, "yuhaiin.dns.type", [
  { no: 0, name: "reserve" },
  { no: 1, name: "udp" },
  { no: 2, name: "tcp" },
  { no: 3, name: "doh" },
  { no: 4, name: "dot" },
  { no: 5, name: "doq" },
  { no: 6, name: "doh3" },
]);

/**
 * @generated from message yuhaiin.dns.dns
 */
export class dns extends Message<dns> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: yuhaiin.dns.type type = 5;
   */
  type = type.reserve;

  /**
   * @generated from field: string subnet = 4;
   */
  subnet = "";

  /**
   * @generated from field: string tls_servername = 2 [json_name = "tls_servername"];
   */
  tlsServername = "";

  constructor(data?: PartialMessage<dns>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.dns.dns";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(type) },
    { no: 4, name: "subnet", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tls_servername", jsonName: "tls_servername", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): dns {
    return new dns().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): dns {
    return new dns().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): dns {
    return new dns().fromJsonString(jsonString, options);
  }

  static equals(a: dns | PlainMessage<dns> | undefined, b: dns | PlainMessage<dns> | undefined): boolean {
    return proto3.util.equals(dns, a, b);
  }
}

/**
 * @generated from message yuhaiin.dns.dns_config
 */
export class dns_config extends Message<dns_config> {
  /**
   * @generated from field: string server = 4;
   */
  server = "";

  /**
   * @generated from field: bool fakedns = 5;
   */
  fakedns = false;

  /**
   * @generated from field: string fakedns_ip_range = 6 [json_name = "fakedns_ip_range"];
   */
  fakednsIpRange = "";

  /**
   * @generated from field: string fakedns_ipv6_range = 13 [json_name = "fakedns_ipv6_range"];
   */
  fakednsIpv6Range = "";

  /**
   * @generated from field: repeated string fakedns_whitelist = 9 [json_name = "fakedns_whitelist"];
   */
  fakednsWhitelist: string[] = [];

  /**
   * @generated from field: bool resolve_remote_domain = 7 [json_name = "resolve_remote_domain"];
   */
  resolveRemoteDomain = false;

  /**
   * @generated from field: yuhaiin.dns.dns remote = 1;
   */
  remote?: dns;

  /**
   * @generated from field: yuhaiin.dns.dns local = 2;
   */
  local?: dns;

  /**
   * @generated from field: yuhaiin.dns.dns bootstrap = 3;
   */
  bootstrap?: dns;

  /**
   * @generated from field: map<string, string> hosts = 8;
   */
  hosts: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, yuhaiin.dns.dns> resolver = 10;
   */
  resolver: { [key: string]: dns } = {};

  constructor(data?: PartialMessage<dns_config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.dns.dns_config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "server", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "fakedns", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "fakedns_ip_range", jsonName: "fakedns_ip_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "fakedns_ipv6_range", jsonName: "fakedns_ipv6_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "fakedns_whitelist", jsonName: "fakedns_whitelist", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "resolve_remote_domain", jsonName: "resolve_remote_domain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 1, name: "remote", kind: "message", T: dns },
    { no: 2, name: "local", kind: "message", T: dns },
    { no: 3, name: "bootstrap", kind: "message", T: dns },
    { no: 8, name: "hosts", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "resolver", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: dns} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): dns_config {
    return new dns_config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): dns_config {
    return new dns_config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): dns_config {
    return new dns_config().fromJsonString(jsonString, options);
  }

  static equals(a: dns_config | PlainMessage<dns_config> | undefined, b: dns_config | PlainMessage<dns_config> | undefined): boolean {
    return proto3.util.equals(dns_config, a, b);
  }
}

