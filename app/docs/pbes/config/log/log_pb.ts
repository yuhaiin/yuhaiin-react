// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file config/log/log.proto (package yuhaiin.log, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum yuhaiin.log.log_level
 */
export enum log_level {
  /**
   * @generated from enum value: verbose = 0;
   */
  verbose = 0,

  /**
   * @generated from enum value: debug = 1;
   */
  debug = 1,

  /**
   * @generated from enum value: info = 2;
   */
  info = 2,

  /**
   * @generated from enum value: warning = 3;
   */
  warning = 3,

  /**
   * @generated from enum value: error = 4;
   */
  error = 4,

  /**
   * @generated from enum value: fatal = 5;
   */
  fatal = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(log_level)
proto3.util.setEnumType(log_level, "yuhaiin.log.log_level", [
  { no: 0, name: "verbose" },
  { no: 1, name: "debug" },
  { no: 2, name: "info" },
  { no: 3, name: "warning" },
  { no: 4, name: "error" },
  { no: 5, name: "fatal" },
]);

/**
 * @generated from message yuhaiin.log.logcat
 */
export class logcat extends Message<logcat> {
  /**
   * @generated from field: yuhaiin.log.log_level level = 1;
   */
  level = log_level.verbose;

  /**
   * @generated from field: bool save = 2;
   */
  save = false;

  constructor(data?: PartialMessage<logcat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yuhaiin.log.logcat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(log_level) },
    { no: 2, name: "save", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): logcat {
    return new logcat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): logcat {
    return new logcat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): logcat {
    return new logcat().fromJsonString(jsonString, options);
  }

  static equals(a: logcat | PlainMessage<logcat> | undefined, b: logcat | PlainMessage<logcat> | undefined): boolean {
    return proto3.util.equals(logcat, a, b);
  }
}

